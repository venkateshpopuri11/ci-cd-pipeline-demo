// app/server.js
const express = require("express");
const app = express();
const PORT = process.env.PORT || 3000;

app.get("/", (req, res) => {
  res.json({ message: "Hello from CI/CD Pipeline Demo " });
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

{
  "name": "ci-cd-pipeline-demo",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node app/server.js",
    "test": "echo \"Running tests...\" && exit 0"
  },
  "dependencies": {
    "express": "^4.18.2"
  }
}
# Dockerfile
FROM node:18
WORKDIR /usr/src/app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3000
CMD ["npm", "start"]

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ci-cd-demo
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ci-cd-demo
  template:
    metadata:
      labels:
        app: ci-cd-demo
    spec:
      containers:
        - name: ci-cd-demo
          image: your-dockerhub-username/ci-cd-demo:latest
          ports:
            - containerPort: 3000

apiVersion: v1
kind: Service
metadata:
  name: ci-cd-demo-service
spec:
  selector:
    app: ci-cd-demo
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
  type: LoadBalancer


// Jenkinsfile
pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/<your-username>/ci-cd-pipeline-demo.git'
            }
        }
        stage('Build') {
            steps {
                sh 'docker build -t ci-cd-demo .'
            }
        }
        stage('Test') {
            steps {
                sh 'npm test'
            }
        }
        stage('Push to DockerHub') {
            steps {
                withCredentials([string(credentialsId: 'dockerhub-pass', variable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u <your-dockerhub-username> --password-stdin'
                    sh 'docker push <your-dockerhub-username>/ci-cd-demo:latest'
                }
            }
        }
        stage('Deploy to K8s') {
            steps {
                sh 'kubectl apply -f k8s/'
            }
        }
    }
}


git init
git add .
git commit -m "Initial CI/CD pipeline demo project"
git branch -M main
git remote add origin https://github.com/<your-username>/ci-cd-pipeline-demo.git
git push -u origin main



